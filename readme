一、设计模式的重要性

1) 软件工程中，设计模式是对软件中普遍存在（反复出现）的各种问题，所提出的解决方案；
   是从建筑设计领域引入到计算机科学中。

二、设计模式的目的

1) 代码代码重用性

2) 可读性

3) 可扩展性

4) 可靠性
   增加新代码与原有的功能影响很低

5）高内聚、低耦合

三、设计模式7个原则

  1)、单一职责
      对一个类来说；一个类只应该负责一项职责；如果类A负责了两个不同的职责；a、b；当职责a变化可能会导致b变化、不可预测；
      所以需要将a、b分开；
      不仅对类来说是这样子的；一个函数也应该是单一的；不因该在一个函数中处理多个事务；

      注意事项
       1、降低类的复杂度、一个类只负责一项职责
       2、提高类的可读性
       3、降低变更引起的风险

  2)、接口隔离原则
      客户端不应该依赖它不需要的接口，即一个类对另外的一个类的依赖应该建立在最小的接口上；
      一个类对另一个类的依赖应该建立在最小接口上，将大的接口拆成小的接口；在组合起来使用；

  3)、依赖倒置原则 (面向接口编程)
      1、高层模块不应该依赖底层模块；二者都应该依赖抽象
      2、抽象不应该依赖细节，细节应该依赖抽象
      3、依赖倒置原则的中心的思想是面向接口编程
      4、使用接口好的目的是定好规范；而不设计具体操作；把展示细节的任务交给具体的类去实现；

      注意细节
        1、底层模尽量都要有抽象类后接口。
        2、变量的声明类型尽量是抽象层；这样我们就动态替换实现。
        3、继承时；遵守里氏替换原则。

  4)、里氏替换原则 (引用基类的地方必须能透明的使用子类对象)
      1、继承包含了这样一层含义；父类凡是已经实现好的方法；实际上是设定好的规范；虽然他不强制要求所有子类必须遵循这些契约；但如果子类覆写了某些方法；在一定程度上会对整个系统造成破环。
      2、考虑到父类中的某一个方法修改时；所有子类都会收到影响。
      
      注意细节:
       可以采用组合方式来解耦
  
  5)、开辟封闭原则
      1、是编制中最基础、最重要的原则
      2、一个软件实体如类、模块和函数应对扩展开发、修改关闭。用来构架框架；用实现扩展细节。
      3、当软件休要发生变化时；尽量通过扩展软环实体的行为来实现变化。而不是通过修改已有的代码来实现。
      4、尽量使用面向接口编程。
